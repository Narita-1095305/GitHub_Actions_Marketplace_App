'use client'

import {
  Card,
  CardHeader,
  CardBody,
  Heading,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Badge,
  Text,
  HStack,
  VStack,
  Link,
  Skeleton,
  Box,
  Button,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  Icon,
} from '@chakra-ui/react'
import { ExternalLinkIcon, ChevronDownIcon } from '@chakra-ui/icons'
import { useState, useMemo } from 'react'

interface Vulnerability {
  id: number
  cve_id: string
  package_name: string
  package_version: string
  risk_score: number
  cvss_score: number
  severity: string
  is_direct: boolean
}

interface VulnerabilityTableProps {
  data?: Vulnerability[]
  searchTerm?: string
}

export function VulnerabilityTable({ data, searchTerm = '' }: VulnerabilityTableProps) {
  const [sortBy, setSortBy] = useState<'risk_score' | 'cvss_score' | 'package_name'>('risk_score')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc')

  // Sample data if no real data is available
  const sampleData: Vulnerability[] = [
    {
      id: 1,
      cve_id: 'CVE-2023-1234',
      package_name: 'express',
      package_version: '4.17.1',
      risk_score: 8.2,
      cvss_score: 8.5,
      severity: 'High',
      is_direct: true,
    },
    {
      id: 2,
      cve_id: 'CVE-2023-5678',
      package_name: 'lodash',
      package_version: '4.17.20',
      risk_score: 4.8,
      cvss_score: 4.3,
      severity: 'Medium',
      is_direct: false,
    },
    {
      id: 3,
      cve_id: 'CVE-2023-9012',
      package_name: 'axios',
      package_version: '0.21.1',
      risk_score: 6.5,
      cvss_score: 7.2,
      severity: 'High',
      is_direct: true,
    },
  ]

  const vulnerabilities = data && data.length > 0 ? data : sampleData

  const filteredAndSortedData = useMemo(() => {
    let filtered = vulnerabilities.filter(vuln =>
      vuln.package_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.cve_id.toLowerCase().includes(searchTerm.toLowerCase())
    )

    return filtered.sort((a, b) => {
      const aVal = a[sortBy]
      const bVal = b[sortBy]
      
      if (typeof aVal === 'string' && typeof bVal === 'string') {
        return sortOrder === 'asc' 
          ? aVal.localeCompare(bVal)
          : bVal.localeCompare(aVal)
      }
      
      return sortOrder === 'asc' 
        ? (aVal as number) - (bVal as number)
        : (bVal as number) - (aVal as number)
    })
  }, [vulnerabilities, searchTerm, sortBy, sortOrder])

  const getRiskColor = (score: number) => {
    if (score >= 7) return 'red'
    if (score >= 4) return 'orange'
    return 'green'
  }

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'red'
      case 'high': return 'orange'
      case 'medium': return 'yellow'
      case 'low': return 'green'
      default: return 'gray'
    }
  }

  const handleSort = (field: typeof sortBy) => {
    if (sortBy === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setSortBy(field)
      setSortOrder('desc')
    }
  }

  return (
    <Card>
      <CardHeader>
        <HStack justify="space-between" align="center">
          <VStack align="start" spacing={1}>
            <Heading size="md" color="gray.700">
              üîç Top Vulnerabilities
            </Heading>
            <Text fontSize="sm" color="gray.600">
              {filteredAndSortedData.length} vulnerabilities found
            </Text>
          </VStack>
          
          <Menu>
            <MenuButton as={Button} rightIcon={<ChevronDownIcon />} size="sm">
              Sort by {sortBy.replace('_', ' ')} ({sortOrder})
            </MenuButton>
            <MenuList>
              <MenuItem onClick={() => handleSort('risk_score')}>
                Risk Score
              </MenuItem>
              <MenuItem onClick={() => handleSort('cvss_score')}>
                CVSS Score
              </MenuItem>
              <MenuItem onClick={() => handleSort('package_name')}>
                Package Name
              </MenuItem>
            </MenuList>
          </Menu>
        </HStack>
      </CardHeader>
      
      <CardBody>
        <Box overflowX="auto">
          <Table variant="simple" size="sm">
            <Thead>
              <Tr>
                <Th>CVE ID</Th>
                <Th>Package</Th>
                <Th>Version</Th>
                <Th>Risk Score</Th>
                <Th>CVSS</Th>
                <Th>Severity</Th>
                <Th>Type</Th>
                <Th>Actions</Th>
              </Tr>
            </Thead>
            <Tbody>
              {filteredAndSortedData.map((vuln) => (
                <Tr key={vuln.id} _hover={{ bg: 'gray.50' }}>
                  <Td>
                    <Link
                      href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.cve_id}`}
                      isExternal
                      color="blue.600"
                      fontWeight="medium"
                    >
                      {vuln.cve_id}
                      <Icon as={ExternalLinkIcon} ml={1} boxSize={3} />
                    </Link>
                  </Td>
                  <Td>
                    <Text fontFamily="mono" fontSize="sm">
                      {vuln.package_name}@{vuln.package_version}
                    </Text>
                  </Td>
                  <Td>
                    <Text fontFamily="mono" fontSize="sm" color="gray.600">
                      {vuln.package_version}
                    </Text>
                  </Td>
                  <Td>
                    <Badge
                      colorScheme={getRiskColor(vuln.risk_score)}
                      variant="solid"
                      borderRadius="full"
                      px={2}
                    >
                      {vuln.risk_score.toFixed(1)}
                    </Badge>
                  </Td>
                  <Td>
                    <Text fontWeight="medium">
                      {vuln.cvss_score.toFixed(1)}
                    </Text>
                  </Td>
                  <Td>
                    <Badge
                      colorScheme={getSeverityColor(vuln.severity)}
                      variant="subtle"
                    >
                      {vuln.severity}
                    </Badge>
                  </Td>
                  <Td>
                    <Badge
                      colorScheme={vuln.is_direct ? 'blue' : 'gray'}
                      variant="outline"
                      size="sm"
                    >
                      {vuln.is_direct ? 'Direct' : 'Transitive'}
                    </Badge>
                  </Td>
                  <Td>
                    <HStack spacing={2}>
                      <Button size="xs" variant="outline" colorScheme="blue">
                        Details
                      </Button>
                      <Button size="xs" variant="outline" colorScheme="orange">
                        Fix
                      </Button>
                    </HStack>
                  </Td>
                </Tr>
              ))}
            </Tbody>
          </Table>
          
          {filteredAndSortedData.length === 0 && (
            <Box textAlign="center" py={8}>
              <Text color="gray.500">
                No vulnerabilities found matching &quot;{searchTerm}&quot;
              </Text>
            </Box>
          )}
        </Box>
      </CardBody>
    </Card>
  )
}